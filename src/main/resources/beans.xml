<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">
	
	<!-- com.mchange.v2.c3p0.ComboPooledDataSource类在c3p0-0.9.5.1.jar包的com.mchange.v2.c3p0包中 -->  
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">  
	    <property name="driverClass" value="com.mysql.jdbc.Driver" />  
	    <property name="jdbcUrl" value="jdbc:mysql://localhost:3306/shop" />  
	    <property name="user" value="root" />  
	    <property name="password" value="123123" />
	</bean>
	
	<!-- 配置sessionFactory org.springframework.orm.hibernate4.LocalSessionFactoryBean类在spring-orm-4.2.4.RELEASE.jar包的org.springframework.orm.hibernate4包中 -->  
	<bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">  
	     <property name="dataSource" ref="dataSource" />  
	     <property name="configLocation" value="classpath:hibernate.cfg.xml" /> <!-- 加载hibernate配置文件 -->  
	</bean>

	<!-- 配置事务管理器 org.springframework.orm.hibernate4.HibernateTransactionManager类spring-orm-4.2.4.RELEASE.jar包的org.springframework.orm.hibernate4包中 -->  
	<bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">  
	     <property name="sessionFactory" ref="sessionFactory" />  
	</bean>

	<!-- REQUIRED表示如果存在事务，则支持当前的事务，如果没有则创建一个新的事务，这个事务模式应用在所有以save、update和delete开头的方法上，也就是说对数据库的增删改的时候需要添加事务支持。SUPPORTS表示如果存在事务，则支持当前的事务，如果没有就算了。 -->
	<tx:advice id="advice" transaction-manager="transactionManager">
	    <tx:attributes>
	        <tx:method name="save*" propagation="REQUIRED"/>
	        <tx:method name="update*" propagation="REQUIRED"/>
	        <tx:method name="delete*" propagation="REQUIRED"/>
	        <tx:method name="*" propagation="SUPPORTS"/>
	    </tx:attributes>
	</tx:advice>
	
	<aop:config>
	    <!-- 配置哪些包的类要切入事务 -->
	    <aop:pointcut id="pointcut" expression="execution(* com.ssh.service.impl.*.*(..))" />  
	    <aop:advisor advice-ref="advice" pointcut-ref="pointcut"/><!-- 连接了advice和pointcut -->  
	    <!-- aop:pointcut要写在aop:advisor上面，否则会报错 -->
	</aop:config>

	<bean id="categoryService" class="com.ssh.service.impl.CategoryServiceImpl">  
	    <property name="sessionFactory" ref="sessionFactory" /><!-- 依赖的sessionFactory用我们之前配好的sessionFactory-->  
	</bean>
	
	<!-- struts的action -->
	<bean id="categoryAction" class="com.ssh.action.CategoryAction" scope="prototype">  
    	<property name="categoryService" ref="categoryService" /><!-- 依赖的categoryService用上面和Hibernate整合时配置好的categoryService -->  
	</bean>
	
	<!-- 测试spring的bean -->
	<bean id="date" class="java.util.Date" />
	
</beans>
